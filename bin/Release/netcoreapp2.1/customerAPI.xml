<?xml version="1.0"?>
<doc>
    <assembly>
        <name>customerAPI</name>
    </assembly>
    <members>
        <member name="T:customerAPI.Controllers.HomeController">
            <summary>
            Controller: Home
            </summary>
        </member>
        <member name="M:customerAPI.Controllers.HomeController.Index">
            <summary>
            Redirect to swagger
            </summary>
            <returns>Swagger page</returns>
        </member>
        <member name="T:customerAPI.Controllers.PersonController">
            <summary>
            Person Operations
            </summary>
        </member>
        <member name="M:customerAPI.Controllers.PersonController.Get(System.String)">
            <summary>
            Get by Id
            </summary>
            <param name="id">Id to get</param>
            <returns>Person or null</returns>
            <response code="200">Person</response>
            <response code="400">Bad ID value</response>
            <response code="404">ID Not Found</response>
        </member>
        <member name="M:customerAPI.Controllers.PersonController.Search(System.String)">
            <summary>
            Search for people
            </summary>
            <param name="text">Search Text</param>
            <returns>Search results</returns>
            <response code="400">Missing Search Text</response>
        </member>
        <member name="T:customerAPI.DataAccess.DataFactory">
            <summary>
            Data Factory
            </summary>
        </member>
        <member name="P:customerAPI.DataAccess.DataFactory.People">
            <summary>
            People
            </summary>
        </member>
        <member name="T:customerAPI.DataAccess.ModelMaker">
            <summary>
            Model Maker
            </summary>
        </member>
        <member name="M:customerAPI.DataAccess.ModelMaker.PersonMake">
            <summary>
            Make a Person Full of Data
            </summary>
            <returns></returns>
        </member>
        <member name="T:customerAPI.GlobalExceptionFilter">
            <summary>
            ASP.NET Core Global Exception Handler
            </summary>
        </member>
        <member name="M:customerAPI.GlobalExceptionFilter.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            CTOR
            </summary>
            <param name="logger">Logger to inject</param>
        </member>
        <member name="M:customerAPI.GlobalExceptionFilter.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:customerAPI.GlobalExceptionFilter.OnException(Microsoft.AspNetCore.Mvc.Filters.ExceptionContext)">
            <summary>
            Handle Exception
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:customerAPI.Models.Address">
            <summary>
            Address
            </summary>
        </member>
        <member name="P:customerAPI.Models.Address.Address1">
            <summary>
            Primary Delivery Address
            </summary>
        </member>
        <member name="P:customerAPI.Models.Address.Address2">
            <summary>
            Appt #, etc/
            </summary>
        </member>
        <member name="P:customerAPI.Models.Address.City">
            <summary>
            City
            </summary>
        </member>
        <member name="P:customerAPI.Models.Address.State">
            <summary>
            State of Provence
            </summary>
        </member>
        <member name="P:customerAPI.Models.Address.Zip">
            <summary>
            Zip Code
            </summary>
        </member>
        <member name="P:customerAPI.Models.Address.Kind">
            <summary>
            Address Kind
            </summary>
        </member>
        <member name="P:customerAPI.Models.Address.IsEmpty">
            <summary>
            Test if the address is effectively empty
            </summary>
        </member>
        <member name="T:customerAPI.Models.AddressKind">
            <summary>
            Kind of Address
            </summary>
        </member>
        <member name="F:customerAPI.Models.AddressKind.Mailing">
            <summary>
            Mailing
            </summary>
        </member>
        <member name="F:customerAPI.Models.AddressKind.Billing">
            <summary>
            Billing
            </summary>
        </member>
        <member name="F:customerAPI.Models.AddressKind.Other">
            <summary>
            Other
            </summary>    
        </member>
        <member name="T:customerAPI.Models.ErrorPayload">
            <summary>
            Error Payload
            </summary>
        </member>
        <member name="P:customerAPI.Models.ErrorPayload.StatusCode">
            <summary>
            HTTP Status Code
            </summary>
        </member>
        <member name="P:customerAPI.Models.ErrorPayload.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:customerAPI.Models.ErrorPayload.StackTrace">
            <summary>
            Stack Trace
            </summary>
        </member>
        <member name="P:customerAPI.Models.ErrorPayload.Data">
            <summary>
            Additional Data
            </summary>
        </member>
        <member name="T:customerAPI.Models.Person">
            <summary>
            Person
            </summary>
        </member>
        <member name="P:customerAPI.Models.Person._id">
            <summary>
            PK of Person
            <para>Mongo DB is super fussy about this name</para>
            </summary>
        </member>
        <member name="P:customerAPI.Models.Person.NameLast">
            <summary>
            Last Name
            </summary>
        </member>
        <member name="P:customerAPI.Models.Person.NameFirst">
            <summary>
            First Name
            </summary>
        </member>
        <member name="P:customerAPI.Models.Person.EMail">
            <summary>
            E-Mail
            </summary>
        </member>
        <member name="P:customerAPI.Models.Person.Company">
            <summary>
            Company
            </summary>
        </member>
        <member name="P:customerAPI.Models.Person.Birthday">
            <summary>
            Birthday
            </summary>
        </member>
        <member name="P:customerAPI.Models.Person.Addresses">
            <summary>
            Address List
            </summary>
        </member>
        <member name="P:customerAPI.Models.Person.Preference">
            <summary>
            Preferences
            </summary>
        </member>
        <member name="T:customerAPI.Program">
            <summary>
            Main Entry
            </summary>
        </member>
        <member name="M:customerAPI.Program.Main(System.String[])">
            <summary>
            Entry Point
            </summary>
            <param name="args">(sic)</param>
        </member>
        <member name="T:customerAPI.Startup">
            <summary>
            Start Up
            </summary>
        </member>
        <member name="M:customerAPI.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            CTOR
            </summary>
            <param name="configuration">IConfiguration</param>
        </member>
        <member name="P:customerAPI.Startup.Configuration">
            <summary>
            Property
            </summary>
        </member>
        <member name="M:customerAPI.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services">IServiceCollection</param>
        </member>
        <member name="M:customerAPI.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IHostingEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app">IApplicationBuilder</param>
            <param name="env">IHostingEnvironment</param>
        </member>
        <member name="T:customerAPI.TypeSwitch">
            <summary>
            Provides for switching on type (handy for error handling)
            <para>From: http://stackoverflow.com/questions/11277036/typeswitching-in-c-sharp</para>
            
            </summary>
        </member>
        <member name="T:customerAPI.TypeSwitch.CaseInfo">
            <summary>
            Case Info
            </summary>
        </member>
        <member name="P:customerAPI.TypeSwitch.CaseInfo.IsDefault">
            <summary>
            Is Default Case
            </summary>
        </member>
        <member name="P:customerAPI.TypeSwitch.CaseInfo.Target">
            <summary>
            Type to switch on
            </summary>
        </member>
        <member name="P:customerAPI.TypeSwitch.CaseInfo.Action">
            <summary>
            Thing to do if this case selected
            </summary>
        </member>
        <member name="M:customerAPI.TypeSwitch.Do(System.Object,customerAPI.TypeSwitch.CaseInfo[])">
            <summary>
            Do the action
            </summary>
            <param name="source">Source of the action</param>
            <param name="cases">Cases</param>
        </member>
        <member name="M:customerAPI.TypeSwitch.Case``1(System.Action)">
            <summary>
            Case Block
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="action">Action</param>
            <returns>Case Information</returns>
        </member>
        <member name="M:customerAPI.TypeSwitch.Case``1(System.Action{``0})">
            <summary>
            Case Block (Generic)
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="action">Action</param>
            <returns>Case Information</returns>
        </member>
        <member name="M:customerAPI.TypeSwitch.Default(System.Action)">
            <summary>
            Default Case Block
            </summary>
            <param name="action">Action</param>
            <returns>Case Information</returns>
        </member>
    </members>
</doc>
